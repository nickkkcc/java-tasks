package ru.mail.polis.homework.simple;

import java.util.Arrays;

/**
 * Возможно вам понадобится класс Math с его методами. Например, чтобы вычислить квадратный корень, достаточно написать
 * Math.sqrt(1.44)
 * Чтобы увидеть все методы класса Math, достаточно написать Math. и среда вам сама покажет возможные методы.
 * Для просмотра подробной документации по выбранному методу нажмите Ctrl + q
 */
public class DoubleAdvancedTask {

    private static final double EPS = 1e-10; //Добавил EPS для сравнения double

    /**
     * Вывести три корня кубического уравнения через запятую: a * x ^ 3 + b * x ^ 2 + c * x + d = 0;
     * Вывод менять не нужно, надо только посчитать x1, x2 и x3, где x1 >= x2 >= x3
     * Считаем, что все три корня вещественные.
     * <p>
     * Если используете какой-то конкретный способ, напишите какой.
     * Пример: (1, -4, -7, 10) -> "-2.0, 1.0, 5.0"
     */
    public static String equation(int a, int b, int c, int d) {
        /*
         * Метод Кардано - Виета (тригонометрический) для вещественных корней и коэффициентов.
         */

        // Переобразуем коэффициенты в новые и создадим массив для хранения корней:
        double a1 = (double) b / a;
        double b1 = (double) c / a;
        double c1 = (double) d / a;
        double[] X = {0, 0, 0}; // Исправил .0 здесь и далее.

        // Вычисление вспомогательных переменных
        double Q = (Math.pow(a1, 2) - 3 * b1) / 9;
        double R = (2 * Math.pow(a1, 3) - 9 * a1 * b1 + 27 * c1) / 54;
        double phi = (Math.acos(R / Math.sqrt(Math.pow(Q, 3)))) / 3;
        double S = Math.pow(Q, 3) + Math.pow(R, 2);

        // Сам алгоритм для различных случаев. Примечание: предполагаем, что корни только вещественные.
        // Случай трех вещественных корней.
        // Исправил .0 и убрал повторяющийся код.
        if (S > 0) {
            X[0] = -2 * Math.sqrt(Q) * Math.cos(phi) - a1 / 3;
            X[1] = -2 * Math.sqrt(Q) * Math.cos(phi + (2 * Math.PI / 3)) - a1 / 3;
            X[2] = -2 * Math.sqrt(Q) * Math.cos(phi - (2 * Math.PI / 3)) - a1 / 3;
        } else {
            // Случай совпадающих корней.
            X[0] = -2 * Math.pow(R, 1. / 3) - a1 / 3;
            X[1] = Math.pow(R, 1. / 3) - a1 / 3;
            X[2] = X[1];
        }
        Arrays.sort(X);
        return X[2] + ", " + X[1] + ", " + X[0];
    }

    /**
     * Нужно посчитать расстояние, между двумя прямыми
     * Примеры: (1, 1, 2, -1) -> 0
     * (0, 1, 0, 5) -> 4
     */
    public static float length(double a1, double b1, double a2, double b2) {
        /*
         * Проверим, параллельны ли прямые. Если нет, то выведем 0.
         * Далее используем формулу для нахождения расстояния между параллельными прямыми.
         */
        if (Math.abs(a1 - a2) > EPS) { //Исправил сравнение double.
            return 0;
        }
        return (float) (Math.abs(b2 - b1) / Math.sqrt(Math.pow(a1, 2) + 1));
    }

    /**
     * Даны три точки в пространстве (x1, y1, z1) , (x2, y2, z2) и (x3, y3, z3). Вам нужно найти Z координату
     * четвертой точки (x4, y4, z4), которая находится на той же плоскости что и первые три.
     * (0, 0, 1,
     * 1, 1, 1,
     * 10, 100, 1,
     * 235, -5) -> 1
     */
    public static double surfaceFunction(int x1, int y1, int z1,
                                         int x2, int y2, int z2,
                                         int x3, int y3, int z3,
                                         int x4, int y4) {
        /*
         * Описание алгоритма:
         * Находим уравнение плоскости по трем точкам вида Ax + By + Cz + 1 = 0, находя соответствующие коэффициенты
         * уравнения через решение системы уравнений методом Крамера. Далее выделяем координату z необходимой точки,
         * принадлежащией плоскости.
         * Примечание: предполагаем, что четвертая точка точно находится на этой плоскости.
         */

        //Реализуем метод Крамера:
        //Исправил скобки и преведение в double в одном месте.
        double discriminator = (double) x1 * (y2 * z3 - z2 * y3) + y1 * (z2 * x3 - x2 * z3) + z1 * (x2 * y3 - y2 * x3);
        double A = ((z2 * y3 - y2 * z3) + y1 * (z3 - z2) + z1 * (y2 - y3)) / discriminator;
        double B = (x1 * (z2 - z3) + (x2 * z3 - z2 * x3) + z1 * (x3 - x2)) / discriminator;
        double C = (x1 * (y3 - y2) + y1 * (x2 - x3) + (y2 * x3 - x2 * y3)) / discriminator;

        //Реализуем нахождение координаты Z четвертой точки.
        return (-1 - A * x4 - B * y4) / C;
    }
}
