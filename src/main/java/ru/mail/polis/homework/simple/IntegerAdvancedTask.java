package ru.mail.polis.homework.simple;


/**
 * Возможно вам понадобится класс Math с его методами. Например, чтобы вычислить квадратный корень, достаточно написать
 * Math.sqrt(1.44)
 * Чтобы увидеть все методы класса Math, достаточно написать Math. и среда вам сама покажет возможные методы.
 * Для просмотра подробной документации по выбранному методу нажмите Ctrl + q
 */
public class IntegerAdvancedTask {

    private static final double EPS = 1e-10;
    private static final int BASE = 16;
    private static final char[] DICT = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

    /**
     * Сумма первых n-членов геометрической прогрессии с первым элементом a и множителем r
     * a + aq + aq^2 + ... + aq^(n-1)
     * <p>
     * Пример: (1, 2, 3) -> 7
     */
    public static long progression(int a, double q, int n) {
        /*
         * Используем формулу для нахлждения сумму n  членов геометрической прогрессии при условии q != 0.
         * Для случая q == 1 имеем простую формулу для нахождения суммы S = n * a1.
         */
        if (Math.abs(q - 1) > EPS) { //Исправил сравнение double.
            return (long) (a * (Math.pow(q, n) - 1) / (q - 1));
        }
        return (long) n * a; //Исправил лишние скобки.
    }

    /**
     * Гусеница ползает по столу квадратами по часовой стрелке. За день она двигается следующим образом:
     * сначала наверх на up, потом направо на right. Ночью она двигается вниз на down и налево на left.
     * Сколько суток понадобится гусенице, чтобы доползти до поля с травой?
     * Считаем, что на каждой клетке с координатами >= grassX или >= grassY находится трава
     * Если она этого никогда не сможет сделать, Верните число Integer.MAX_VALUE;
     * Пример: (10, 3, 5, 5, 20, 11) -> 2
     */
    public static int snake(int up, int right, int down, int left, int grassX, int grassY) {
        //Реализовал алгоритм через функции, без циклов и проверок на переход в зону.

        // Проверяем на то, что вообще ей куда-то надо двигаться
        if (grassX == 0 && grassY == 0) {
            return 0;
        }

        // Проверка на то, не дошла ли змейка до целевой зоны за один шаг
        if (up >= grassY || right >= grassX) {
            return 1;
        }

        // Определим смещения за целый день.
        int dX = right - left;
        int dY = up - down;

        /* Проверка на то, сможет ли змейка вообще дойти до целевой зоны (зацикливания и уход в 3 квадрант). Если нет -
         * вывод Integer.MAX_VALUE. Примечание: предполагается, что змейка может двигаться также и по одной координате.
         */
        // Исправил условие для читаемости.
        if (dX <= 0 && dY <= 0) {
            return Integer.MAX_VALUE;
        }
        /*
         * Разложил задачу на две одномерные и нашел для каждого измерения дни, за которые змейка достигнет
         * части целевой зоны по x и по y. days - массив дней относительно измеренй {X,Y}.
         */

        // Убрал массив и поправил циклы.
        // Вычисление количества дней по формуле для каждого из измерений.
        int daysX = (int) Math.ceil((grassX - right) / (double) dX) + 1;
        int daysY = (int) Math.ceil((grassY - up) / (double) dY) + 1;

        // Если по x отрицательные дни, то возвращаем дни по Y. Иначе возвращаем дни по x (случаи, когда days >= 0).
        if (Math.min(daysY, daysX) < 0) {
            return Math.max(daysY, daysX);
        }
        return Math.min(daysY, daysX);
    }

    /**
     * Дано число n в 10-ном формате и номер разряда order.
     * Выведите цифру стоящую на нужном разряде для числа n в 16-ом формате
     * Нельзя пользоваться String-ами
     * Пример: (454355, 2) -> D
     */
    public static char kDecimal(int n, int order) {
        /*
         * Создаем словарь аналогов char целевых чисел в 16-ой системе (static поле). Проверяем, меньше ли заданное
         * число, чем 16. Если число меньше 16, вычислять ничего не надо -> выбираем соответствующий аналог из словаря.
         * Если число больше -> применяем формулу для перевода в 16-ую систему. Выводим необходим аналог из словаря
         * числу в целевом разряде.
         */

        // Возвращаем char аналог из словаря, если число меньше,чем 16.
        if (n < BASE) {
            return DICT[n];
        }
        // Исправил черзе pow.
        // Если число n >= 16, то вычисляем число в разряде в 16-ной системе, и возвращаем его char аналог ищ словаря.
        int index = (int) (n / Math.pow(BASE, order - 1)) % BASE;
        return DICT[index];
    }

    /**
     * Дано число в 10-ном формате.
     * Нужно вывести номер минимальной цифры для числа в 16-ном формате. Счет начинается справа налево,
     * выводим номер первой минимальной цифры (если их несколько)
     * Нельзя пользоваться String-ами
     * (6726455) -> 2
     */
    public static byte minNumber(long a) {
        /*
         * В случае передачи числа меньше 16, числа в пересчете являются одиночными или буквами -> один разряд,
         * который и является минимальным. (1)Для одиночных букв, видимо, предполагается, что необходимо выводить
         * позицию 1 как будто буква интерпретируется как число, помещающееся в одном разряде. Пример: A -> 10, B -> 11
         * и т.д.(2)Но хотя в задании написано вывести цифру в 16-ной системе -> буква не цифра (цифр нет), значит
         * позиция несуществующей цифры в такой записи 0). Примечание: реализовал для предположения (1), когда запись
         * одиночной буквы интерпретируется как единственный разряд и минимальный (значащий).
         */

        //Для предположения (2) достаточно поменять условие на a < 10 (Но тогда тест для 11 будет ругаться, хотя
        // 11 -> B - буква, позиция несуществующей цифры - 0).
        // Исправил волшебное число.
        if (a <= BASE) {
            return 1;
        }
        /*
         * Определяются значения в каждом разряде по формуле перевода в 16-ую систему. Находится разряд с минималным
         * значением цифры на текующую итерацию minNumber и его индекс minIndex. Примечание: учет цифра это или буква
         * несущественен, так как все цифры в пересчете в 16-ую систему меньше букв (если их считать значащими).
         */
        // Исправил волшебное число и ошибку с изменением входных аргументов.
        byte minNumber = BASE; // Исправил.
        byte tempNumber;
        byte minIndex = 0;
        byte index = 0;
        long number = a;

        while (number > 0) {
            index++;
            tempNumber = (byte) (number % BASE);
            if (tempNumber < minNumber) {
                minNumber = tempNumber;
                minIndex = index;
            }
            number /= BASE;
        }
        return minIndex;
    }
}
