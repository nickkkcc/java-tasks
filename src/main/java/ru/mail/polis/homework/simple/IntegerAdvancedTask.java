package ru.mail.polis.homework.simple;


/**
 * Возможно вам понадобится класс Math с его методами. Например, чтобы вычислить квадратный корень, достаточно написать
 * Math.sqrt(1.44)
 * Чтобы увидеть все методы класса Math, достаточно написать Math. и среда вам сама покажет возможные методы.
 * Для просмотра подробной документации по выбранному методу нажмите Ctrl + q
 */
public class IntegerAdvancedTask {

    private static final double EPS = 1e-10;

    /**
     * Сумма первых n-членов геометрической прогрессии с первым элементом a и множителем r
     * a + aq + aq^2 + ... + aq^(n-1)
     * <p>
     * Пример: (1, 2, 3) -> 7
     */
    public static long progression(int a, double q, int n) {
        /*
         * Используем формулу для нахлждения сумму n  членов геометрической прогрессии при условии q != 0.
         * Для случая q == 1 имеем простую формулу для нахождения суммы S = n * a1.
         */
        if ((long) q != 1) {
            return (long) (a * (Math.pow(q, n) - 1) / (q - 1));
        }
        return ((long) n * a);
    }

    /**
     * Гусеница ползает по столу квадратами по часовой стрелке. За день она двигается следующим образом:
     * сначала наверх на up, потом направо на right. Ночью она двигается вниз на down и налево на left.
     * Сколько суток понадобится гусенице, чтобы доползти до поля с травой?
     * Считаем, что на каждой клетке с координатами >= grassX или >= grassY находится трава
     * Если она этого никогда не сможет сделать, Верните число Integer.MAX_VALUE;
     * Пример: (10, 3, 5, 5, 20, 11) -> 2
     */
    public static int snake(int up, int right, int down, int left, int grassX, int grassY) {
        // Проверка не достигнет ли змейка целевого поля за одни сутки (если да -> выход)
        if (up >= grassY || right >= grassX) {
            return 1;
        }
        // Текущие координаты змейки и количество суток.
        int currentX = 0;
        int currentY = 0;
        int dayTime = 0;
        /*
         * Проверка на уход змейки в обратную сторону от целевой зоны, если да -> змейка никогда не достигнет целевой
         * зоны. Если иначе, то змейка движется в сторону целевой зоны по какой-либо из координат (разница движений по
         * координатам положительна). Находим текущую координату (X, Y) и тут же проверяем не достигла ли змейка
         * целевой зоны за половину дня и за полный день (по каждой из координат).
         */
        if ((right - left) > 0 | (up - down) > 0) {
            do {
                dayTime++;
            } while ((currentY += up) < grassY & (currentY -= down) < grassY & (currentX += right) < grassX & (currentX -= left) < grassX);
            return dayTime;
        }
        return Integer.MAX_VALUE;
    }

    /**
     * Дано число n в 10-ном формате и номер разряда order.
     * Выведите цифру стоящую на нужном разряде для числа n в 16-ом формате
     * Нельзя пользоваться String-ами
     * Пример: (454355, 2) -> D
     */
    public static char kDecimal(int n, int order) {
        /*
         * Создаем словарь аналогов char целевых чисел в 16-ой системе. Проверяем, меньше ли заданное число, чем 16.
         * Если число меньше 16, вычислять ничего не надо -> выбираем соответствующий аналог из словаря. Если число
         * больше -> применяем формулу для перевода в 16-ую систему. Выводим необходим аналог из словаря числу
         * в целевом разряде.
         */
        char[] dict = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        if (n < 16) {
            return dict[n];
        }
        int number = 0;
        for (int i = 0; i < order; i++) {
            number = n % 16;
            n /= 16;
        }
        return dict[number];
    }

    /**
     * Дано число в 10-ном формате.
     * Нужно вывести номер минимальной цифры для числа в 16-ном формате. Счет начинается справа налево,
     * выводим номер первой минимальной цифры (если их несколько)
     * Нельзя пользоваться String-ами
     * (6726455) -> 2
     */
    public static byte minNumber(long a) {
        /*
         * В случае передачи числа меньше 16, числа в пересчете являются одиночными или буквами -> один разряд,
         * который и является минимальным. (1)Для одиночных букв, видимо, предполагается, что необходимо выводить
         * позицию 1 как будто буква интерпретируется как число, помещающееся в одном разряде. Пример: A -> 10, B -> 11
         * и т.д.(2)Но хотя в задании написано вывести цифру в 16-ной системе -> буква не цифра (цифр нет), значит
         * позиция несуществующей цифры в такой записи 0). Примечание: реализовал для предположения (1), когда запись
         * одиночной буквы интерпретируется как единственный разряд и минимальный (значащий).
         */

        //Для предположения (2) достаточно поменять условие на a < 10 (Но тогда тест для 11 будет ругаться, хотя
        // 11 -> B - буква, позиция несуществующей цифры - 0).
        if (a < 17) {
            return 1;
        }
        /*
         * Определяются значения в каждом разряде по формуле перевода в 16-ую систему. Находится разряд с минималным
         * значением цифры на текующую итерацию minNumber и его индекс minIndex. Примечание: учет цифра это или буква
         * несущественен, так как все цифры в пересчете в 16-ую систему меньше букв (если их считать значащими).
         */
        byte minNumber = 127;
        byte tempNumber;
        byte minIndex = 0;
        byte index = 0;
        while (a > 0) {
            index++;
            tempNumber = (byte) (a % 16);
            if (tempNumber < minNumber) {
                minNumber = tempNumber;
                minIndex = index;
            }
            a /= 16;
        }
        return minIndex;
    }
}
